diff --git a/src/macros.rs b/src/macros.rs
index 0bbd6aa..9b0849b 100644
--- a/src/macros.rs
+++ b/src/macros.rs
@@ -110,22 +110,22 @@ macro_rules! RIDL {
     }) => {
         #[repr(C)] #[allow(missing_copy_implementations)]
         pub struct $vtbl {
-            pub parent: $crate::$pvtbl
+            pub parent: ::$pvtbl
         }
         #[repr(C)] #[derive(Debug)] #[allow(missing_copy_implementations)]
         pub struct $interface {
             pub lpVtbl: *const $vtbl
         }
         impl ::std::ops::Deref for $interface {
-            type Target = $crate::$pinterface;
+            type Target = ::$pinterface;
             #[inline]
-            fn deref(&self) -> &$crate::$pinterface {
+            fn deref(&self) -> &::$pinterface {
                 unsafe { ::std::mem::transmute(self) }
             }
         }
         impl ::std::ops::DerefMut for $interface {
             #[inline]
-            fn deref_mut(&mut self) -> &mut $crate::$pinterface {
+            fn deref_mut(&mut self) -> &mut ::$pinterface {
                 unsafe { ::std::mem::transmute(self) }
             }
         }
@@ -137,7 +137,7 @@ macro_rules! RIDL {
     ) => {
         #[repr(C)] #[allow(missing_copy_implementations)]
         pub struct $vtbl {
-            pub parent: $crate::$pvtbl
+            pub parent: ::$pvtbl
             $(,pub $method: unsafe extern "system" fn(
                 This: *mut $interface
                 $(,$p: $t)*
@@ -154,15 +154,15 @@ macro_rules! RIDL {
             })+
         }
         impl ::std::ops::Deref for $interface {
-            type Target = $crate::$pinterface;
+            type Target = ::$pinterface;
             #[inline]
-            fn deref(&self) -> &$crate::$pinterface {
+            fn deref(&self) -> &::$pinterface {
                 unsafe { ::std::mem::transmute(self) }
             }
         }
         impl ::std::ops::DerefMut for $interface {
             #[inline]
-            fn deref_mut(&mut self) -> &mut $crate::$pinterface {
+            fn deref_mut(&mut self) -> &mut ::$pinterface {
                 unsafe { ::std::mem::transmute(self) }
             }
         }
@@ -182,6 +182,31 @@ macro_rules! UNION {
         }
     }
 }
+#[macro_export]
+macro_rules! UNION2 {
+    (union $name:ident {
+        $storage:ty,
+        $($variant:ident $variant_mut:ident: $ftype:ty,)+
+    }) => (
+        #[repr(C)] #[derive(Debug)] #[allow(missing_copy_implementations)]
+        pub struct $name(pub $storage);
+        impl Copy for $name {}
+        impl Clone for $name {
+            #[inline]
+            fn clone(&self) -> $name { *self }
+        }
+        impl $name {$(
+            #[inline]
+            pub unsafe fn $variant(&self) -> &$ftype {
+                ::std::mem::transmute(self)
+            }
+            #[inline]
+            pub unsafe fn $variant_mut(&mut self) -> &mut $ftype {
+                ::std::mem::transmute(self)
+            }
+        )+}
+    );
+}
 macro_rules! BITFIELD {
     ($base:ident $field:ident: $fieldtype:ty [
         $($thing:ident $set_thing:ident[$r:expr],)+
@@ -250,6 +275,7 @@ macro_rules! FLAGS {
         }
     }
 }
+#[macro_export]
 macro_rules! STRUCT {
     {$(#[$attrs:meta])* nodebug struct $name:ident { $($field:ident: $ftype:ty,)+ }} => {
         #[repr(C)] $(#[$attrs])*
